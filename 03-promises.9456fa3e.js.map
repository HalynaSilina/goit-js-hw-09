{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAgCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAvCmBQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEnC,SAAuCC,GACrCA,EAAEC,iBACF,IAAwDC,EAAfF,EAAEG,cAApCC,SAAWC,EAAKH,EAALb,MAAOiB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAC/BC,QAAQC,IAAKT,EAAEG,cAAcC,UAI7B,IAHA,IAAIM,EAAYC,OAAON,EAAMO,OACvBC,EAAWF,OAAOL,EAAKM,OACvBE,EAAaH,OAAOJ,EAAOK,OACxBG,EAAW,EAAGA,GAAYD,EAAYC,GAAY,EACzD5B,EAAc4B,EAAUL,GACrBM,MAAK,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,M,OACjBJ,EAAAiC,OAAOC,QAAQ,uBAAwCC,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,MAAK,CAC9DgC,QAAO,IACTC,cAAc,G,IAGjBC,OAAM,SAAAN,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,M,OAClBJ,EAAAiC,OAAOM,QAAQ,sBAAqCJ,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,MAAK,CAC7DgC,QAAS,IACTC,cAAc,G,IAGpBZ,GAAaG,EAEfb,EAAEG,cAAcsB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst createPromiseForm = document.querySelector('.form');\n\ncreatePromiseForm.addEventListener('submit', handleCreatePromiseFormSubmit);\n\nfunction handleCreatePromiseFormSubmit(e) {\n  e.preventDefault();\n  const {elements: {delay, step, amount}}= e.currentTarget;\n  console.log (e.currentTarget.elements);\n  let userDelay = Number(delay.value);\n  const userStep = Number(step.value);\n  const userAmount = Number(amount.value);\n  for (let position = 1; position <= userAmount; position += 1) {\n    createPromise(position, userDelay)\n      .then(({ position, delay }) =>\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n          timeout: 5000,\n          clickToClose: true,\n        })\n      )\n      .catch(({ position, delay }) =>\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n          timeout: 5000,\n          clickToClose: true,\n        })\n      );\n    userDelay += userStep;\n  }\n  e.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","_elements","currentTarget","elements","delay1","step","amount","console","log","userDelay","Number","value","userStep","userAmount","position1","then","param","Notify","success","concat","timeout","clickToClose","catch","failure","reset"],"version":3,"file":"03-promises.9456fa3e.js.map"}